AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Hospitly CloudOps Lambda Functions

Architectures:
  - arm64

Parameters:
  DBHost:
    Type: String
    Description: Master DB Host
  DBUser:
    Type: String
    Description: Master DB User
  DBPass:
    Type: String
    Description: Master DB Password
  DBName:
    Type: String
    Description: Master DB Name
  TenantUser:
    Type: String
    Description: Tenant DB User
  TenantPassword:
    Type: String
    Description: Tenant DB Password
  NodeEnv:
    Type: String
    Description: Node environment

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs20.x
    Environment:
      Variables:
        AWS_REGION: !Ref AWS::Region
        LAMBDA_EXECUTION_ROLE: !GetAtt LambdaExecutionRole.Arn
        MASTER_DB_HOST: !Ref DBHost
        MASTER_DB_USER: !Ref DBUser
        MASTER_DB_PASSWORD: !Ref DBPass
        MASTER_DB_NAME: !Ref DBName
        TENANT_DB_USER: !Ref TenantUser
        TENANT_DB_PASSWORD: !Ref TenantPassword
        NODE_ENV: !Ref NodeEnv

Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
          - DELETE
        AllowHeaders:
          - '*'
        AllowOrigins:
          - '*'

  SchedulingServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/schedulingService/
      Handler: index.handler
      Events:
        GetCallSchedule:
          Type: HttpApi
          Properties:
            Path: /scheduling/getCallSchedule
            Method: POST
            ApiId: !Ref HttpApi
        RegenerateSchedule:
          Type: HttpApi
          Properties:
            Path: /scheduling/regenerateSchedule
            Method: POST
            ApiId: !Ref HttpApi
        GetUserSchedule:
          Type: HttpApi
          Properties:
            Path: /scheduling/getUserSchedule
            Method: POST
            ApiId: !Ref HttpApi

  TenantServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/tenantService/
      Handler: index.handler
      Events:
        CreateTenant:
          Type: HttpApi
          Properties:
            Path: /tenant/createTenant
            Method: POST
            ApiId: !Ref HttpApi
        DeleteTenant:
          Type: HttpApi
          Properties:
            Path: /tenant/deleteTenant
            Method: DELETE
            ApiId: !Ref HttpApi

  UserServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/userService/
      Handler: index.handler
      Events:
        AddUsers:
          Type: HttpApi
          Properties:
            Path: /user/addUsers
            Method: POST
            ApiId: !Ref HttpApi
        AddUser:
          Type: HttpApi
          Properties:
            Path: /user/addUser
            Method: POST
            ApiId: !Ref HttpApi
        DeleteUser:
          Type: HttpApi
          Properties:
            Path: /user/deleteUser
            Method: DELETE
            ApiId: !Ref HttpApi

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

Outputs:
  HttpApiUrl:
    Description: URL of your HTTP API
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/"